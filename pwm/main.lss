
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800068  00000394  00000428  2**0
                  ALLOC
  3 .noinit       00000000  00800068  00800068  00000428  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000428  2**0
                  CONTENTS
  5 .stab         00001050  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000009a9  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e8       	ldi	r30, 0x8C	; 140
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	97 c1       	rjmp	.+814    	; 0x38a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <main>:
#define SEL PD5

//FUNCTION "main"
int main (void) 
{
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d2 e0       	ldi	r29, 0x02	; 2
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

	//RED and GREEN framebuffer, 2x 16*16byte
	//uint8_t fb_r[16][16];
	//uint8_t fb_g[16][16];
	uint8_t fb_r[16][16];	
	uint8_t fb_g[16][16];	

	uint8_t x,y;
	
	uint8_t brt_loop=0;
	
	//flash LED to show the start of init process
	DDRB = 0xff;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  6a:	18 ba       	out	0x18, r1	; 24
  6c:	28 e8       	ldi	r18, 0x88	; 136
  6e:	33 e1       	ldi	r19, 0x13	; 19
  70:	e0 e9       	ldi	r30, 0x90	; 144
  72:	f1 e0       	ldi	r31, 0x01	; 1
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	cf 01       	movw	r24, r30
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <main+0x18>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	d1 f7       	brne	.-12     	; 0x74 <main+0x16>
	_delay_ms(500);
	PORTB = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	88 bb       	out	0x18, r24	; 24
	
	//configure I/O
	//0b0011 1111
	DDRD  = 0x3f;
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  88:	12 ba       	out	0x12, r1	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x2e>

	_delay_us(5);
	
	//clear framebuffer
	clear_fb(fb_r);
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	dc d0       	rcall	.+440    	; 0x24e <clear_fb>
	clear_fb(fb_g);
  96:	ce 01       	movw	r24, r28
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	9e 4f       	sbci	r25, 0xFE	; 254
  9c:	d8 d0       	rcall	.+432    	; 0x24e <clear_fb>
  9e:	03 e0       	ldi	r16, 0x03	; 3

	for(x=3;x<13;x++){
	set_px(fb_g,3,x,1);
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	40 2f       	mov	r20, r16
  a4:	63 e0       	ldi	r22, 0x03	; 3
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	8c 0f       	add	r24, r28
  ac:	9d 1f       	adc	r25, r29
  ae:	53 d1       	rcall	.+678    	; 0x356 <set_px>
	set_px(fb_g,4,x,2);
  b0:	22 e0       	ldi	r18, 0x02	; 2
  b2:	40 2f       	mov	r20, r16
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	8c 0f       	add	r24, r28
  bc:	9d 1f       	adc	r25, r29
  be:	4b d1       	rcall	.+662    	; 0x356 <set_px>
	set_px(fb_g,5,x,3);
  c0:	23 e0       	ldi	r18, 0x03	; 3
  c2:	40 2f       	mov	r20, r16
  c4:	65 e0       	ldi	r22, 0x05	; 5
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	8c 0f       	add	r24, r28
  cc:	9d 1f       	adc	r25, r29
  ce:	43 d1       	rcall	.+646    	; 0x356 <set_px>

	set_px(fb_g,7,x,2);
  d0:	22 e0       	ldi	r18, 0x02	; 2
  d2:	40 2f       	mov	r20, r16
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	3b d1       	rcall	.+630    	; 0x356 <set_px>
	set_px(fb_g,8,x,2);	
  e0:	22 e0       	ldi	r18, 0x02	; 2
  e2:	40 2f       	mov	r20, r16
  e4:	68 e0       	ldi	r22, 0x08	; 8
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	8c 0f       	add	r24, r28
  ec:	9d 1f       	adc	r25, r29
  ee:	33 d1       	rcall	.+614    	; 0x356 <set_px>
	set_px(fb_r,7,x,2);
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	40 2f       	mov	r20, r16
  f4:	67 e0       	ldi	r22, 0x07	; 7
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	2d d1       	rcall	.+602    	; 0x356 <set_px>
	set_px(fb_r,8,x,2);
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	40 2f       	mov	r20, r16
 100:	68 e0       	ldi	r22, 0x08	; 8
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	27 d1       	rcall	.+590    	; 0x356 <set_px>

	set_px(fb_g,6,x,3);
 108:	23 e0       	ldi	r18, 0x03	; 3
 10a:	40 2f       	mov	r20, r16
 10c:	66 e0       	ldi	r22, 0x06	; 6
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	8c 0f       	add	r24, r28
 114:	9d 1f       	adc	r25, r29
 116:	1f d1       	rcall	.+574    	; 0x356 <set_px>
	set_px(fb_g,9,x,2);	
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	40 2f       	mov	r20, r16
 11c:	69 e0       	ldi	r22, 0x09	; 9
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	8c 0f       	add	r24, r28
 124:	9d 1f       	adc	r25, r29
 126:	17 d1       	rcall	.+558    	; 0x356 <set_px>
	set_px(fb_r,6,x,2);
 128:	22 e0       	ldi	r18, 0x02	; 2
 12a:	40 2f       	mov	r20, r16
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	11 d1       	rcall	.+546    	; 0x356 <set_px>
	set_px(fb_r,9,x,3);
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	40 2f       	mov	r20, r16
 138:	69 e0       	ldi	r22, 0x09	; 9
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0b d1       	rcall	.+534    	; 0x356 <set_px>

	set_px(fb_r,10,x,3);
 140:	23 e0       	ldi	r18, 0x03	; 3
 142:	40 2f       	mov	r20, r16
 144:	6a e0       	ldi	r22, 0x0A	; 10
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	05 d1       	rcall	.+522    	; 0x356 <set_px>
	set_px(fb_r,11,x,2);
 14c:	22 e0       	ldi	r18, 0x02	; 2
 14e:	40 2f       	mov	r20, r16
 150:	6b e0       	ldi	r22, 0x0B	; 11
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	ff d0       	rcall	.+510    	; 0x356 <set_px>
	set_px(fb_r,12,x,1);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	40 2f       	mov	r20, r16
 15c:	6c e0       	ldi	r22, 0x0C	; 12
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	f9 d0       	rcall	.+498    	; 0x356 <set_px>
 164:	0f 5f       	subi	r16, 0xFF	; 255
 166:	0d 30       	cpi	r16, 0x0D	; 13
 168:	09 f0       	breq	.+2      	; 0x16c <main+0x10e>
 16a:	9a cf       	rjmp	.-204    	; 0xa0 <main+0x42>

	}



	//TOGGLE BRIGHT AND RESET LINE
  	PORTD |= (1<<BRT) | (1<<RST);
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	88 61       	ori	r24, 0x18	; 24
 170:	82 bb       	out	0x12, r24	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 172:	95 e0       	ldi	r25, 0x05	; 5
 174:	89 2f       	mov	r24, r25
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x118>
	_delay_us(1);

	PORTD &= ~ ( (1<<BRT) | (1<<RST) );
 17a:	82 b3       	in	r24, 0x12	; 18
 17c:	87 7e       	andi	r24, 0xE7	; 231
 17e:	82 bb       	out	0x12, r24	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 180:	89 2f       	mov	r24, r25
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x124>
	_delay_us(1);
	
	//SELECT DATA INPUT, requires continous dataflow..
	//We should implement "write frame" and "keep alive" functions. 
	//When Select ist low, matrix shows data from internal buffer. matrix then only needs clock signal, nothing else.
	PORTD |= (1<<SEL);
 186:	95 9a       	sbi	0x12, 5	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 188:	89 2f       	mov	r24, r25
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x12c>
	_delay_us(1);
	
	//as in datasheet: BRIGHT HIGH
	PORTD |= (1<<BRT);
 18e:	93 9a       	sbi	0x12, 3	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x132>
 194:	35 e2       	ldi	r19, 0x25	; 37
 196:	e3 2e       	mov	r14, r19
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a2 2e       	mov	r10, r18
 19c:	b1 2c       	mov	r11, r1
 19e:	6e 01       	movw	r12, r28
 1a0:	08 94       	sec
 1a2:	c1 1c       	adc	r12, r1
 1a4:	d1 1c       	adc	r13, r1
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	85 01       	movw	r16, r10
 1b0:	06 2e       	mov	r0, r22
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0x15a>
 1b4:	00 0f       	add	r16, r16
 1b6:	11 1f       	adc	r17, r17
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <main+0x156>
	_delay_us(1);

  	//MAIN LOOP
	//code implemented as described in datasheet timing diagram, page 295

  	while(1)
	{

//		scroll_h(fb_r,'l');
//		scroll_v(fb_g,'u');

		for(brt_loop=0; brt_loop<16;brt_loop++)
		{
	
			for(y=0; y<16; y++)
			{	
				//PULL BRIGHTNESS UP, AS IN DATASHEET
				PORTD |= (1<<BRT);
 1bc:	93 9a       	sbi	0x12, 3	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1be:	8e 2d       	mov	r24, r14
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x162>
 1c4:	d6 01       	movw	r26, r12
 1c6:	a4 0f       	add	r26, r20
 1c8:	b5 1f       	adc	r27, r21
 1ca:	9e 01       	movw	r18, r28
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3e 4f       	sbci	r19, 0xFE	; 254
 1d0:	24 0f       	add	r18, r20
 1d2:	35 1f       	adc	r19, r21
 1d4:	ff 24       	eor	r15, r15
				_delay_us(7);
				for(x=0; x<16; x++)
				{
					//IF RED PX IS SET IN FB:
					PORTD &= ~(1<<RED);
 1d6:	90 98       	cbi	0x12, 0	; 18
		
					if( gamma_table[fb_r[x][y]] & (1<<brt_loop) )
 1d8:	ec 91       	ld	r30, X
 1da:	ff 27       	eor	r31, r31
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e0 5a       	subi	r30, 0xA0	; 160
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	80 23       	and	r24, r16
 1ea:	91 23       	and	r25, r17
 1ec:	89 2b       	or	r24, r25
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <main+0x194>
					{
						//SET RED DATA LINE LOW
						PORTD |= (1<<RED);
 1f0:	90 9a       	sbi	0x12, 0	; 18
					}
		
		
					//IF GREEN PX IS SET IN FB:
		                      	PORTD &= ~(1<<GRN);
 1f2:	91 98       	cbi	0x12, 1	; 18
	                        
					if( gamma_table[fb_g[x][y]] & (1<<brt_loop) )
 1f4:	f9 01       	movw	r30, r18
 1f6:	80 81       	ld	r24, Z
 1f8:	e8 2f       	mov	r30, r24
 1fa:	ff 27       	eor	r31, r31
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	e0 5a       	subi	r30, 0xA0	; 160
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	80 23       	and	r24, r16
 20a:	91 23       	and	r25, r17
 20c:	89 2b       	or	r24, r25
 20e:	09 f0       	breq	.+2      	; 0x212 <main+0x1b4>
		                        {
						//SET GREEN DATA LINE LOW
		                                PORTD |= (1<<GRN);
 210:	91 9a       	sbi	0x12, 1	; 18
		                        }
		
					//TOGGLE CLOCK LINE
					PORTD |= (1<<CLK);
 212:	92 9a       	sbi	0x12, 2	; 18
					
					PORTD &= ~(1<<CLK);
 214:	92 98       	cbi	0x12, 2	; 18
 216:	f3 94       	inc	r15
 218:	50 96       	adiw	r26, 0x10	; 16
 21a:	20 5f       	subi	r18, 0xF0	; 240
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	f0 e1       	ldi	r31, 0x10	; 16
 220:	ff 16       	cp	r15, r31
 222:	c9 f6       	brne	.-78     	; 0x1d6 <main+0x178>
 224:	80 e1       	ldi	r24, 0x10	; 16
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x1c8>
				}
	
				//PULL BRIGHTNESS LOW, AS IN DATASHEET
				_delay_us(3);
				PORTD &= ~(1<<BRT);
 22a:	93 98       	cbi	0x12, 3	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x1d0>
 232:	4f 5f       	subi	r20, 0xFF	; 255
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	40 31       	cpi	r20, 0x10	; 16
 238:	51 05       	cpc	r21, r1
 23a:	09 f0       	breq	.+2      	; 0x23e <main+0x1e0>
 23c:	bf cf       	rjmp	.-130    	; 0x1bc <main+0x15e>
				_delay_us(6);
		
				
			}
			PORTD |= (1<<BRT);
 23e:	93 9a       	sbi	0x12, 3	; 18
 240:	6f 5f       	subi	r22, 0xFF	; 255
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	60 31       	cpi	r22, 0x10	; 16
 246:	71 05       	cpc	r23, r1
 248:	09 f0       	breq	.+2      	; 0x24c <main+0x1ee>
 24a:	af cf       	rjmp	.-162    	; 0x1aa <main+0x14c>
 24c:	ac cf       	rjmp	.-168    	; 0x1a6 <main+0x148>

0000024e <clear_fb>:
 24e:	30 e1       	ldi	r19, 0x10	; 16
 250:	fc 01       	movw	r30, r24
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	11 92       	st	Z+, r1
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	20 31       	cpi	r18, 0x10	; 16
 25a:	e1 f7       	brne	.-8      	; 0x254 <clear_fb+0x6>
 25c:	31 50       	subi	r19, 0x01	; 1
 25e:	40 96       	adiw	r24, 0x10	; 16
 260:	33 23       	and	r19, r19
 262:	b1 f7       	brne	.-20     	; 0x250 <clear_fb+0x2>
 264:	08 95       	ret

00000266 <scroll_h>:
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	9c 01       	movw	r18, r24
 272:	6c 36       	cpi	r22, 0x6C	; 108
 274:	11 f5       	brne	.+68     	; 0x2ba <scroll_h+0x54>
 276:	ec 01       	movw	r28, r24
 278:	bc 01       	movw	r22, r24
 27a:	60 51       	subi	r22, 0x10	; 16
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	8c 01       	movw	r16, r24
 284:	00 5f       	subi	r16, 0xF0	; 240
 286:	1f 4f       	sbci	r17, 0xFF	; 255
 288:	f8 80       	ld	r15, Y
 28a:	d8 01       	movw	r26, r16
 28c:	a4 0f       	add	r26, r20
 28e:	b5 1f       	adc	r27, r21
 290:	f9 01       	movw	r30, r18
 292:	e4 0f       	add	r30, r20
 294:	f5 1f       	adc	r31, r21
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	8c 91       	ld	r24, X
 29a:	80 83       	st	Z, r24
 29c:	91 50       	subi	r25, 0x01	; 1
 29e:	50 96       	adiw	r26, 0x10	; 16
 2a0:	70 96       	adiw	r30, 0x10	; 16
 2a2:	99 23       	and	r25, r25
 2a4:	c9 f7       	brne	.-14     	; 0x298 <scroll_h+0x32>
 2a6:	fb 01       	movw	r30, r22
 2a8:	f1 92       	st	Z+, r15
 2aa:	bf 01       	movw	r22, r30
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	40 31       	cpi	r20, 0x10	; 16
 2b4:	51 05       	cpc	r21, r1
 2b6:	21 f1       	breq	.+72     	; 0x300 <scroll_h+0x9a>
 2b8:	e7 cf       	rjmp	.-50     	; 0x288 <scroll_h+0x22>
 2ba:	62 37       	cpi	r22, 0x72	; 114
 2bc:	09 f5       	brne	.+66     	; 0x300 <scroll_h+0x9a>
 2be:	ec 01       	movw	r28, r24
 2c0:	c0 51       	subi	r28, 0x10	; 16
 2c2:	df 4f       	sbci	r29, 0xFF	; 255
 2c4:	8e 01       	movw	r16, r28
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	bc 01       	movw	r22, r24
 2cc:	60 52       	subi	r22, 0x20	; 32
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	f8 80       	ld	r15, Y
 2d2:	db 01       	movw	r26, r22
 2d4:	a4 0f       	add	r26, r20
 2d6:	b5 1f       	adc	r27, r21
 2d8:	f8 01       	movw	r30, r16
 2da:	e4 0f       	add	r30, r20
 2dc:	f5 1f       	adc	r31, r21
 2de:	9f e0       	ldi	r25, 0x0F	; 15
 2e0:	8c 91       	ld	r24, X
 2e2:	80 83       	st	Z, r24
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	50 97       	sbiw	r26, 0x10	; 16
 2e8:	70 97       	sbiw	r30, 0x10	; 16
 2ea:	99 23       	and	r25, r25
 2ec:	c9 f7       	brne	.-14     	; 0x2e0 <scroll_h+0x7a>
 2ee:	f9 01       	movw	r30, r18
 2f0:	f1 92       	st	Z+, r15
 2f2:	9f 01       	movw	r18, r30
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	21 96       	adiw	r28, 0x01	; 1
 2fa:	40 31       	cpi	r20, 0x10	; 16
 2fc:	51 05       	cpc	r21, r1
 2fe:	41 f7       	brne	.-48     	; 0x2d0 <scroll_h+0x6a>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	08 95       	ret

0000030c <scroll_v>:
 30c:	65 37       	cpi	r22, 0x75	; 117
 30e:	81 f4       	brne	.+32     	; 0x330 <scroll_v+0x24>
 310:	dc 01       	movw	r26, r24
 312:	20 e1       	ldi	r18, 0x10	; 16
 314:	3c 91       	ld	r19, X
 316:	fd 01       	movw	r30, r26
 318:	9f e0       	ldi	r25, 0x0F	; 15
 31a:	81 81       	ldd	r24, Z+1	; 0x01
 31c:	81 93       	st	Z+, r24
 31e:	91 50       	subi	r25, 0x01	; 1
 320:	e1 f7       	brne	.-8      	; 0x31a <scroll_v+0xe>
 322:	fd 01       	movw	r30, r26
 324:	37 87       	std	Z+15, r19	; 0x0f
 326:	21 50       	subi	r18, 0x01	; 1
 328:	50 96       	adiw	r26, 0x10	; 16
 32a:	22 23       	and	r18, r18
 32c:	99 f0       	breq	.+38     	; 0x354 <scroll_v+0x48>
 32e:	f2 cf       	rjmp	.-28     	; 0x314 <scroll_v+0x8>
 330:	64 36       	cpi	r22, 0x64	; 100
 332:	81 f4       	brne	.+32     	; 0x354 <scroll_v+0x48>
 334:	dc 01       	movw	r26, r24
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	fd 01       	movw	r30, r26
 33a:	37 85       	ldd	r19, Z+15	; 0x0f
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	86 85       	ldd	r24, Z+14	; 0x0e
 340:	87 87       	std	Z+15, r24	; 0x0f
 342:	91 50       	subi	r25, 0x01	; 1
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	99 23       	and	r25, r25
 348:	d1 f7       	brne	.-12     	; 0x33e <scroll_v+0x32>
 34a:	3c 93       	st	X, r19
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	50 96       	adiw	r26, 0x10	; 16
 350:	20 31       	cpi	r18, 0x10	; 16
 352:	91 f7       	brne	.-28     	; 0x338 <scroll_v+0x2c>
 354:	08 95       	ret

00000356 <set_px>:
 356:	e6 2f       	mov	r30, r22
 358:	ff 27       	eor	r31, r31
 35a:	34 e0       	ldi	r19, 0x04	; 4
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	3a 95       	dec	r19
 362:	e1 f7       	brne	.-8      	; 0x35c <set_px+0x6>
 364:	e8 0f       	add	r30, r24
 366:	f9 1f       	adc	r31, r25
 368:	e4 0f       	add	r30, r20
 36a:	f1 1d       	adc	r31, r1
 36c:	20 83       	st	Z, r18
 36e:	08 95       	ret

00000370 <clr_px>:
 370:	e6 2f       	mov	r30, r22
 372:	ff 27       	eor	r31, r31
 374:	54 e0       	ldi	r21, 0x04	; 4
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	5a 95       	dec	r21
 37c:	e1 f7       	brne	.-8      	; 0x376 <clr_px+0x6>
 37e:	e8 0f       	add	r30, r24
 380:	f9 1f       	adc	r31, r25
 382:	e4 0f       	add	r30, r20
 384:	f1 1d       	adc	r31, r1
 386:	10 82       	st	Z, r1
 388:	08 95       	ret

0000038a <_exit>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <_exit>
